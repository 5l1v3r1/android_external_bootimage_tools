bootimg-tools is an highly flexible utility for manage android boot images 

Usage:  bootimg-tools ACTION <switches>
The following actions are available
  unpack	unpack a boot image into it's constituent parts
  pack		pack seperate files into a boot image
  list		print boot image header details or ramdisk fileinfo
  extract   extract a single file from a boot image ramdisk
  update    update the boot image
  
See bootimg-tools help <action> for detailed information



Summary
-------
unpack a boot image into it's constituent parts

Usage:  bootimg-tools <u|unpack> [ command-switches ] [ global-switches ]
		

Options:
	-i, --boot-image				the source boot image
	-o, --output-dir 				the output base output directory
	-k, --kernel					unpack the kernel image to the specified file
	-s, --second					write the secondary bootloader to the specified file
	-h, --header					write the boot image header to the specified file
	-c, --cmdline					write the cmdline to the specified file
	-b, --board						write the boot image name to the specified file
	-p, --pagesize					write the pagesize info to the specified file
	
	-r, --ramdisk-name				the name of the extracted ramdisk files
	-d, --ramdisk-directory			unpack the ramdisk to directory to the specified location
	-x, --ramdisk-archive			unpack the ramdisk to archive level to the specified file
	--ramdisk-cpio					unpack the ramdisk to cpio level to the specified file

Notes:
	The --input switch must contain a path to file. This file must exist and contain
	a valid android boot image. specified by the magic ANDROID! . The boot image can
	be offset with in the file.
	
	The --output switch is optional it must contain a directory. 
	If the directory does not exist	then it will be created 
	If the directory exists:
		with --overwrite switch, The existing contents will be deleted 
		without --overwrite switch, The program will exit
	
	If the user does not have permission to create the directory then 
	the program will exit
	
	If the --output is not set then the current directory is used.
	The --overwrite switch is ignored for safety
	
	The --kernel flag specifies the name of the extracted kernel binary blob


Examples: All command switches for the unpack command can be combined 


# Unpack full boot image
unpack --input <bootimage name> --all [ --output-dir [output dir] ]

The following switches can be combined to your requirements

# Unpack ramdisk examples
1. Unpack all ramdisk files 
unpack --input <bootimage name> --ramdisk-name [ramdisk-name] [ --ramdisk-cpio ] [ --ramdisk-archive ] [ --ramdisk-directory ]    [ --output-dir <output-dir> ]

# Unpack kernel examples
unpack --input <bootimage name> --kernel [kernel-name] [ --output-dir <output-dir> ]

# Unpack second examples
unpack --input <bootimage name> --second [second-bootloader] [ --output-dir <output-dir> ]

# Unpack cmdline examples
unpack --input <bootimage name> --cmdline [cmdline-filename] [ --output-dir <output-dir> ]

# Unpack board examples
unpack --input <bootimage name> --board [board-filename] [ --output-dir <output-dir> ]

# Unpack details examples
unpack --input <bootimage name> --details [details-filename] [ --output-dir <output-dir> ]

# Unpack Combination


Global Switches
----------------
Globals switches can be used with all commands the control the programs behaviour and 
output, There are as follows

	--no-logfile			The will automatically create a session log by default.
							You can use the --no-log switch if logging is not required
					
	--log-name				By default the logfile created has the following pattern
							<BOOT IMAGE NAME><ACTION><DATE>.log, use this switch to override
							the default
	--log-stdout			prints the log messages to stdout, use in combination with --no-logfile
							to print to stdout only
	--interactive			Interactive mode allows you to run or skip each part of the process
	
							
	--cpio					Specific an external cpio binary
	--gzip					Specific an external gzip binary
	--lzop					Specific an external lzop binary
	--xz					Specific an external xz binary
							
Smart-Lazy Mode ( SLMode )
--------------------------

Using Smart/Lazy Mode allows you to be lazy and the program to be smart. 
SLMode is activated by simply passing a string to as the command line parameter, 
Then the program will try to figure out what to do with it.

If the command is a valid boot image filename then the program will attempt to unpack the 
image to the current directory


Output Generated:

kernel - Unpack Kernel Binary Blob
initramfs.cpio.gz - gzipped cpio'd initial ramdisk  
initramfs.cpio - cpio'd initial ramdisk
ramdisk - directory containing initial ramdisk contents
cmdline - file containing the kernel command line string
board - file containing the boot image name
second - Binary Blob containing Secondary Bootloader if present
details - file containing full details including offsets, pagesizes etc
